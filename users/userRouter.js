const express = require('express');
// const router = require("express").Router();

const router = express.Router();

const Users = require('./userDb.js');
const Posts = require('../posts/postDb.js');
// const validate = require("./validateMw.js");ðŸ‘‰creating custom middleware file & importing

// user
// | field | data type        | metadata                                            |
// | ----- | ---------------- | --------------------------------------------------- |
// | id    | unsigned integer | primary key, auto-increments, generated by database |
// | name  | string           | required, unique

router.post('/', validateUser, (req, res) => {
  // do your magic!
  const newUser = req.body;
  Users.insert(newUser)
    .then(rv => {
      res.status(201).json({ id: rv.id, ...newUser });
    })
    .catch(error => {
      res.status(500).json({ error: "There was an error while saving the user to the database" });
    });
});
// post
// | field   | data type        | metadata                                            |
// | ------- | ---------------- | --------------------------------------------------- |
// | id      | unsigned integer | primary key, auto-increments, generated by database |
// | text    | text             | required                                            |
// | user_id | unsigned integer | required, must be the `id` of an existing `user`    |
router.use('/:id', validateUserId);
router.use('/:id/posts', validatePost);
router.post('/:id/posts', (req, res) => {
  // do your magic!
  Users.getById(req.params.id)
    .then(user => {
      if (!user) {
        res.status(404).json({ message: "The user with the specified ID does not exist." })
      } else {
        newPost = req.body;
        newPost.user_id = user.id;
        Posts.insert(newPost);
        res.status(201).json(newPost)
      }
    })
    .catch(err => {
      res.status(500).json({ error: "There was an error while saving the post to the database" })
    });
});

router.get('/', (req, res) => {
  // do your magic!
  Users.get()
    .then(users => {
      if (!users) {
        res.status(400).json({ message: 'Not found' });
      } else {
        res.status(200).json(users);
      }
    })
    .catch(error => {
      res.status(500).json({ error: error.message });
    });
});

router.get('/:id', validateUserId, (req, res) => {
  // do your magic!
  Users.getById(req.params.id)
    .then(user => {
      res.status(200).json(user);
    })
    .catch(error => {
      res.status(500).json({ error: error.message });
    });
});

router.get('/:id/posts', (req, res) => {
  // do your magic!
  Users.getUserPosts(req.params.id)
    .then(posts => {
      res.status(200).json(posts);
    })
    .catch(error => {
      res.status(500).json({ error: error.message });
    });
});

router.delete('/:id', validateUserId, (req, res) => {
  // do your magic!
  Users.remove(req.params.id)
    .then(count => {
      if (count > 0) {
        res.status(200).json({ message: "The user has been nuked" })
      } else {
        res.status(500).json({ message: "Error removing the user" })
      }
    })
    .catch(error => {
      // log error to server
      console.log(error);
      res.status(500).json({ message: "Error removing the user" });
    });
});

router.put('/:id', validateUserId, (req, res) => {
  // do your magic!
  changes = req.body;
  Users.update(req.params.id, changes)
    .then(count => {
      if (count === 1) {
        res.status(200).json({ message: "User has been updated" });
      } else {
        res.status(500).json({ message: "Error updating the user" });
      }
    })
    .catch(error => {
      // log error to server
      console.log(error);
      res.status(500).json({ message: "Error updating the user" });
    });
});

//custom middleware

function validateUserId(req, res, next) {
  // do your magic!
  Users.getById(req.params.id)
    .then(user => {
      if (user) {
        next();
      } else {
        res.status(404).json({ message: "invalid user id" });
      }
    })
    .catch(error => {
      res.status(500).json({ error: error.message });
    });
};

function validateUser(req, res, next) {
  // do your magic!
  if (!req.body) {
    res.status(400).json({ message: "missing user data" });
  } else if (!req.body.name) {
    res.status(400).json({ message: "missing required name field" })
  } else {
    next();
  }
};

function validatePost(req, res, next) {
  // do your magic!
  if (!req.body) {
    res.status(400).json({ message: "missing post data" });
  } else if (!req.body.text) {
    res.status(400).json({ message: "missing required text field" })
  } else {
    next();
  }
};

module.exports = router;
